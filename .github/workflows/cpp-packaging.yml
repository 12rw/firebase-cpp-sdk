name: CPP binary SDK packaging
on:
  workflow_dispatch:
    inputs:
      commitId:
        description: 'commit ID to package'

env:
  # Packaging prerequisites
  # Binutils 2.34 released Feb 1, 2020
  binutilsVer: 2.34
  # Demumble 1.1.0 released Nov 13, 2018
  demumbleVer: 1.1.0

jobs:
  build_tools:
    name: build-packaging-tools
    runs-on: macos-latest
    steps:
      - name: fetch and build binutils
        run: |
          curl -L https://ftpmirror.gnu.org/binutils/binutils-${{ env.binutilsVer }}.tar.xz --output binutils.tar.xz
          tar -xf binutils.tar.xz
          mv ./binutils-${{ env.binutilsVer }} ./binutils-src
          cd binutils-src
          ./configure --enable-targets=all --prefix=/tmp/binutils
          make
          make install
          cd -
          mkdir -p packaging-tools
          cp -af /tmp/binutils/bin/* packaging-tools
      - name: fetch demumble
        uses: actions/checkout@v2.3.1
        with:
          repository: nico/demumble
          path: demumble-src
          ref: v${{ env.demumbleVer }}
      - name: build demumble
        run: |
          cd demumble-src
          cmake .
          cmake --build .
          python demumble_test.py
          cd -
          mkdir -p packaging-tools
          cp -af demumble-src/demumble packaging-tools
      - name: archive tools
        run: |
          cd packaging-tools
          tar -czhf ../packaging-tools.tgz .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packaging-tools
          path: packaging-tools.tgz

  build_package_ios:
    name: build-package-ios
    runs-on: macos-latest
    steps:
      - name: fetch SDK
        uses: actions/checkout@v2.3.1
        with:
          path: sdk-src
          ref: ${{ github.event.inputs.commitId }}
      - name: install prerequisites
        run: sdk-src/build_scripts/ios/install_prereqs.sh
      - name: build sdk
        run: |
          sdk-src/build_scripts/ios/build.sh -b firebase-cpp-sdk-ios-build -s sdk-src
          sdk-src/build_scripts/ios/package.sh firebase-cpp-sdk-ios-build firebase-cpp-sdk-ios-package
          cd firebase-cpp-sdk-ios-package
          tar -czhf ../firebase-cpp-sdk-ios-package.tgz .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: firebase-cpp-sdk-ios-package
          path: firebase-cpp-sdk-ios-package.tgz

  build_package_android:
    name: build-package-android-${{matrix.stl}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        stl: ["c++", "gnustl", "stlport"]
    steps:
      - name: fetch SDK
        uses: actions/checkout@v2.3.1
        with:
          path: sdk-src
          ref: ${{ github.event.inputs.commitId }}
      - name: install prerequisites
        run: sdk-src/build_scripts/android/install_prereqs.sh
      - name: build sdk
        run: |
          sdk-src/build_scripts/android/build.sh firebase-cpp-sdk-android-${{ matrix.stl }}-build sdk-src ${{ matrix.stl }}
          sdk-src/build_scripts/android/package.sh firebase-cpp-sdk-android-${{ matrix.stl }}-build firebase-cpp-sdk-android-${{ matrix.stl }}-package ${{ matrix.stl }}
          cd firebase-cpp-sdk-android-${{ matrix.stl }}-package
          tar -czhf ../firebase-cpp-sdk-android-${{ matrix.stl}}-package.tgz .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: firebase-cpp-sdk-android-${{ matrix.stl }}-package
          path: firebase-cpp-sdk-android-${{ matrix.stl }}-package.tgz

  build_desktop:
    name: build-${{ matrix.sdk_platform }}-${{ matrix.architecture }}-${{ matrix.build_type }}-${{ matrix.linkage }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        architecture: ["x86", "x64"]
        build_type: ["Debug", "Release"]
        linkage: ["dynamic", "static"]
        python_version: [3.7]
        include:
        - os: windows-latest
          linkage: "static"
          architecture: "x64"
          vcpkg_triplet: "x64-windows-static"
          sdk_platform: windows
          cmake_flags: ""
        - os: windows-latest
          linkage: "dynamic"
          architecture: "x64"
          vcpkg_triplet: "x64-windows-dynamic"
          sdk_platform: windows
          cmake_flags: ""
        - os: windows-latest
          linkage: "static"
          architecture: "x86"
          vcpkg_triplet: "x86-windows-static"
          sdk_platform: windows
          cmake_flags: ""
        - os: windows-latest
          linkage: "dynamic"
          architecture: "x86"
          vcpkg_triplet: "x86-windows-dynamic"
          sdk_platform: windows
          cmake_flags: ""
        - os: ubuntu-latest
          architecture: "x86"
          vcpkg_triplet: "x86-linux"
          sdk_platform: linux
          cmake_flags: ""
        - os: ubuntu-latest
          vcpkg_triplet: "x64-linux"
          sdk_platform: linux
          cmake_flags: ""
        - os: macos-latest
          vcpkg_triplet: "x64-osx"
          sdk_platform: darwin
          cmake_flags: "--target_format libraries"
        exclude:
        - os: macos-latest
          architecture: "x86"
        - os: macos-latest
          build_type: "Debug"
        - os: macos-latest
          linkage: "dynamic"
        - os: ubuntu-latest
          build_type: "Debug"
        - os: ubuntu-latest
          linkage: "dynamic"
          
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          ref: ${{ github.event.inputs.commitId }}

      - name: Set env variables for subsequent steps (all)
        run: |
          echo "::set-env name=VCPKG_RESPONSE_FILE::external/vcpkg_${{ matrix.vcpkg_triplet }}_response_file.txt"
          echo "::set-env name=MATRIX_UNIQUE_NAME::${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}"
          echo "::set-env name=SDK_NAME::${{ matrix.sdk_platform }}-${{ matrix.architecture }}-${{ matrix.linkage }}-${{ matrix.build_type }}"

      - name: Add msbuild to PATH (windows)
        if: startsWith(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.0.1

      - name: Cache vcpkg C++ dependencies
        id: cache_vcpkg
        uses: actions/cache@v2
        with:
          path: external/vcpkg/installed
          key: dev-vcpkg-${{ matrix.vcpkg_triplet }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}-${{ hashFiles('.git/modules/external/vcpkg/HEAD') }}

      - name: Cache ccache files
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        id: cache_ccache
        uses: actions/cache@v2
        with:
          path: ccache_dir
          key: dev-test-ccache-${{ env.MATRIX_UNIQUE_NAME }}

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install prerequisites
        run: |
          python scripts/gha/install_prereqs_desktop.py

      - name: Build SDK
        run: |
          python scripts/gha/build_desktop.py --arch "${{ matrix.architecture }}" --config "${{ matrix.build_type }}" --build_dir firebase-cpp-sdk-${{ env.SDK_NAME }}-build --crt_linkage ${{ matrix.linkage }} ${{ matrix.cmake_flags }}
          cd firebase-cpp-sdk-${{ env.SDK_NAME }}-build
          # Preserve the 'external' directory in the source code, we may need the libs built there.
          mkdir -p vcpkg-installed
          cp -af ../external/vcpkg/installed/${{ matrix.vcpkg_triplet }}/ vcpkg-installed/
          tar -czhf ../firebase-cpp-sdk-${{ env.SDK_NAME }}-build.tgz .

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: firebase-cpp-sdk-${{ env.SDK_NAME }}-build
          path: firebase-cpp-sdk-${{ env.SDK_NAME }}-build.tgz

      - name: Stats for ccache (mac and linux)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: ccache -s

  package_desktop:
    name: package-merge-${{ matrix.sdk_platform }}
    runs-on: macos-latest
    needs: [build_tools, build_desktop]
    strategy:
      fail-fast: false
      matrix:
        sdk_platform: [linux, darwin, windows]

    steps:
      - name: fetch SDK
        uses: actions/checkout@v2.3.1
        with:
          path: sdk-src
          ref: ${{ github.event.inputs.commitId }}
      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          # download-artifact doesn't support wildcards, but by default
          # will download all artifacts. Sadly this is what we must do.
          path: artifacts
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install prerequisites
        run: |
          cd sdk-src
          python scripts/gha/install_prereqs_desktop.py
          cd ..
      - name: postprocess and package built SDK
        run: |
          mkdir -p bin
          tar -xvzf artifacts/packaging-tools/packaging-tools.tgz -C bin
          chmod -R u+x bin
          for pkg in artifacts/firebase-cpp-sdk-${{ matrix.sdk_platform }}*-build/*.tgz; do
            # determine the build variant based on the artifact filename
            variant=$(sdk-src/build_scripts/desktop/get_variant.sh "${pkg}")
            sdk-src/build_scripts/desktop/package.sh -b ${pkg} -o firebase-cpp-sdk-${{ matrix.sdk_platform }}-package -p ${{ matrix.sdk_platform }} -t bin -d ${variant} -P python3
          done
          cd firebase-cpp-sdk-${{ matrix.sdk_platform }}-package
          tar -czhf ../firebase-cpp-sdk-${{ matrix.sdk_platform }}-package.tgz .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: firebase-cpp-sdk-${{ matrix.sdk_platform }}-package
          path: firebase-cpp-sdk-${{ matrix.sdk_platform }}-package.tgz

  merge_packages:
    name: merge-packages
    runs-on: ubuntu-latest
    needs: [build_package_ios, build_package_android, package_desktop]
    steps:
      - name: fetch SDK
        uses: actions/checkout@v2.3.1
        with:
          path: sdk-src
          ref: ${{ github.event.inputs.commitId }}

      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          # download-artifact doesn't support wildcards, but by default
          # will download all artifacts. Sadly this is what we must do.
          path: artifacts

      - name: merge SDK packages
        run: |
          set -ex
          mkdir -p firebase_cpp_sdk
          for pkg in artifacts/firebase-cpp-sdk-*-package/*.tgz; do
            tar -xzf "${pkg}" -C firebase_cpp_sdk
          done
          # Add the final files.
          sdk-src/build_scripts/other/package.sh sdk-src firebase_cpp_sdk

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: firebase_cpp_sdk
          path: firebase_cpp_sdk
